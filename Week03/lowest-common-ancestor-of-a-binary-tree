//    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
//        dfs(root,p,q);
//        return ans;
//    }
//    TreeNode ans;
//    private  boolean dfs(TreeNode root, TreeNode p, TreeNode q) {
//        if(root==null) return false;
//        boolean right = dfs(root.right, p, q);
//        boolean left = dfs(root.left, p, q);
//        if(right && left || ((p.val==root.val)||(q.val==root.val))&&(right || left))
//            ans=root;
//        return right||left||p.val==root.val||q.val==root.val;
//    }






 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null || root==p || root==q) return root;


        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        return left==null?right:right==null?left:root;


    }
