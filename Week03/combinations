//    class Solution {
//        List<List<Integer>> res=new LinkedList<>();
//        int n;
//        int k;
//        public List<List<Integer>> combine(int n, int k) {
//            this.n=n;
//            this.k=k;
//            combineprocess(1,new LinkedList<>());
//            return res;
//        }
//
//        private void combineprocess(int i, LinkedList<Integer> objects) {
//            if(objects.size()==k) {
//                res.add(new LinkedList<>(objects));
//            }
//            for(int j=i;j<n+1;j++){
//                objects.add(j);
//                combineprocess(j+1,objects);
//                objects.removeLast();
//            }
//        }
//    }





    List<List<Integer>> res=new ArrayList<>();
    public List<List<Integer>> combine(int n, int k) {
            backtack(n,k,new ArrayList<>(),new boolean[n],1);
            return res;
    }
    private void backtack(int n, int k, ArrayList<Integer> objects,boolean[] b,int idx) {
        if(objects.size()==k) {
            res.add(new ArrayList<>(objects));
        }
        for(int i=idx;i<=n;i++){
            if(objects.contains(i)) continue;
            objects.add(i);
            backtack(n,k,objects,b,i+1);
            objects.remove(objects.size()-1);
        }
    }
