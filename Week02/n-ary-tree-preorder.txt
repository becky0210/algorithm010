/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
     // List<Integer> res=new ArrayList();
    public List<Integer> preorder(Node root) {
        // if (root==null) return res;
        // res.add(root.val);
        // for(Node node:root.children)
        //     preorder(node);
        // return res;
        
        List<Integer> res=new ArrayList<Integer>();
            Stack<Node> stack=new Stack<>();
            if (root==null) return res;
            stack.push(root);
            while(!stack.isEmpty()){
                root=stack.pop();
                res.add(root.val);
                List<Node> children = root.children;
                for(int i=children.size()-1;i>=0;i--)
                    stack.push(children.get(i));
            }
            return res;
        
        
        
    }
}