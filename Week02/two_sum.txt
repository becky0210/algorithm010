class Solution {
    // public int[] twoSum(int[] nums, int target) {
    //     for(int i=0;i<nums.length-1;i++){
    //         for (int j=i+1;j<nums.length;j++)
    //             if(nums[i]+nums[j]==target){
    //                 return new int[]{i,j};
    //             }
    //     }
    //     return new int[]{};

     public int[] twoSum(int[] nums, int target) {
        //  Map<Integer,Integer> m=new HashMap<Integer,Integer>();
        //  for(int i=0;i<nums.length;i++){
        //      if(m.containsKey(target-nums[i])){
        //          return new int[]{m.get(target-nums[i]),i};
        //          }else{
        //          m.put(nums[i],i);
        //      }
        //  }
        //  return new int[]{};
        



    //     int[] result = new int[2];
    //     Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    //     for (int i = 0; i < nums.length; i++) {
    //         if (map.containsKey(target - nums[i])) {
    //             result[1] = i;
    //             result[0] = map.get(target - nums[i]);
    //             return result;
    //     }
    //     map.put(nums[i], i);
    // }
    // return result;


        // Arrays.sort(nums);
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(target-nums[i]))
                return new int[]{i,map.get(target-nums[i])};
            map.put(nums[i],i);

        }
        return new int[]{};
    }
    
}