public class Practice
{
    /**
     * Time complexity of heapify is O(Logn).
     * Time complexity of createAndBuildHeap() is O(n)
     * and overall time complexity of Heap Sort is O(nLogn).
     * @param arr
     */
    public void sort(int[] arr){;
        int n=arr.length;
        int largest=n/2-1;
        int l=largest*2+1;
        int r=largest*2+2;
        for(int i=largest;i>=0;i--){
            heapify(arr,n,i);
        }
        for(int i=n-1;i>0;i--){
            int temp=arr[i];
            arr[i]=arr[0];
            arr[0]=temp;

            heapify(arr,i,0);
        }

    }

    private void heapify(int[] arr, int n, int i) {
        int largest=i;
        int l=i*2+1;
        int r=i*2+2;
        if(l<n && arr[l]>arr[largest])
            largest=l;
        if(r<n && arr[r]>arr[largest])
            largest=r;
        if(largest!=i) {
            int temp = arr[largest];
            arr[largest] = arr[i];
            arr[i] = temp;

            heapify(arr,n,largest);
        }



    }

    public static void main(String[] args) {
        Practice practice = new Practice();
        int[] arr={10,9,8,7,6,5,4,3,2,1};
        practice.sort(arr);
        for(int i=0;i<arr.length;i++)
            System.out.printf(" "+arr[i]+" ");
    }
}