class MyCircularDeque {
    DoubleLinkNode head;
    DoubleLinkNode tail;
    int k;
    int size;

    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        head=new DoubleLinkNode(-1);
        tail=new DoubleLinkNode(-1);
        this.k=k;
        this.size=0;
        head.pre=tail;
        tail.next=head;

        
        
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        DoubleLinkNode node=new DoubleLinkNode(value);
        if(this.size==k) return false;
        else{
            node.next=head;
            node.pre=head.pre;
            head.pre.next=node;
            head.pre=node;
            this.size++;
            return true;
        }
        
        
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        DoubleLinkNode node=new DoubleLinkNode(value);
        if(this.size==k) return false;
        else{
            node.next=tail.next;
            tail.next.pre=node;
            tail.next=node;
            node.pre=tail;
            this.size++;
            return true;
        
            
        }
        
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if(this.size==0) return false;
        else{
            head.pre.pre.next=head;
            head.pre=head.pre.pre;
            this.size--;
            return true;
        }
        
        
        
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if(this.size==0) return false;
        else{
            tail.next.next.pre=tail;
            tail.next=tail.next.next;
            this.size--;
            return true;
        }
       
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
        return head.pre.val;
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        return tail.next.val;
        
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        return size==0;
        
        
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        return size==k;
        
    }
}


class DoubleLinkNode {
    DoubleLinkNode pre;
    DoubleLinkNode next;
    int val;
    public DoubleLinkNode(int val){
        this.val=val;
    }
    
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */