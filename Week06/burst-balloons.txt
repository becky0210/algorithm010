 public int maxCoins(int[] nums) {
        int n = nums.length;
        
        int[][] dp=new int[n+2][n+2];
        int[] val=new int[n+2];
        val[0]=val[n+1]=1;
        int sum=0;
        int max=0;
        for(int i=1;i<=n;i++)
            val[i]=nums[i-1];
        
        for(int i=n-1;i>=0;i--){
            for(int j=i+2;j<=n+1;j++){
                for(int k=i+1;k<j;k++){

                    max=Math.max(dp[i][k]+dp[k][j]+val[i]*val[k]*val[j],dp[i][j]);
                    dp[i][j]=max;
                }
                
            }
        }
        return dp[0][n+1];
    }
	
	
状态数组：dp[n][n]

dp方程：dp[i][j]=dp[i][k]+dp[k][j]+val[i]*val[k]*val[j]

时间复杂度：O(n^3)
空间复杂度：O(n^2)