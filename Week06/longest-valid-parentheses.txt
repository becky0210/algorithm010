public int longestValidParentheses(String s) {
        int n = s.length();
        int[] dp=new int[n];
        int max=0;
        for(int i=1;i<n;i++){
            if(s.charAt(i)==')'){
                if(s.charAt(i-1)=='(')
                    dp[i]=(i-2>=0?dp[i-2]:0)+2;
                else{
                    if( i-dp[i-1]-1>=0 && s.charAt(i-dp[i-1]-1)=='(' )
                        dp[i]=dp[i-1]+2+((i-dp[i-1]-2>=0)?dp[i-dp[i-1]-2]:0);
                }
            }
            max=Math.max(max,dp[i]);
        }
        return max;

    }
	
子问题：
A、s[i]=='(': dp[i]=0
B、s[i]==')':
	1、s[i-1]=='(':dp[i]=dp[i-2]+2
	2、s[i-1]==')':dp[i]=dp[i-1]+2+dp[i-1-dp[i-1]]
状态数组：dp[n]

dp方程：
A类不会改变dp的初始化状态，仅考虑B类的2种情况：
if(s.charAt(i-1)=='(')
    dp[i]=(i-2>=0?dp[i-2]:0)+2;
else{
    if( i-dp[i-1]-1>=0 && s.charAt(i-dp[i-1]-1)=='(' )
        dp[i]=dp[i-1]+2+((i-dp[i-1]-2>=0)?dp[i-dp[i-1]-2]:0);


时间复杂度：O(n)
空间复杂度：O(n)
