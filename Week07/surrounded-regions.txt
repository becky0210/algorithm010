int[] parent;
    public class UnionFind{
        public UnionFind(char[][] board) {
            int n = board.length;
            int m = board[0].length;
            parent = new int[n * m + 1];
            for (int i = 0; i < n * m + 1; i++) {
               parent[i]=i;
            }
        }


        public int find(int i){
            while(i!=parent[i]){
                parent[i]=parent[parent[i]];
                i=parent[i];

            }
            return i;
        }
        public void union(int p,int q) {

            int proot = find(p);
            int qroot = find(q);
            if (proot != qroot) {
                    parent[qroot] = proot;
            }
        }
		
		//check if two nodes have same parent 
        public boolean isConnected(int i1,int i2){
            return find(i1)==find(i2);
        }
    }

    public void solve(char[][] board) {
        if(board.length==0) return;
        int n = board.length;
        int m = board[0].length;

        UnionFind uf=new UnionFind(board);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O') {
					// separate nodes with value equal to 'O' to 2 different group
					// one for those on 4 borders 
					// the other one for remaining 'O' nodes, these nodes will be set to 'X' later
                    if (i == 0 || i == n - 1 || j == 0 || j == m - 1) {
                        uf.union(i*m+j,n*m);
                    } else {
						// union operations for remaining 'O' nodes part
                        if (i + 1 < n && board[i + 1][j] == 'O') {
                            uf.union(i * m + j, (i + 1) * m + j);
                        }
                        if (i - 1 >= 0 && board[i - 1][j] == 'O') {
                            uf.union(i * m + j, (i - 1) * m + j);
                        }
                        if (j + 1 < m && board[i][j + 1] == 'O') {
                            uf.union(i * m + j, i * m + j + 1);
                        }
                        if (j - 1 < m && board[i][j - 1] == 'O') {
                            uf.union(i * m + j, i * m + j - 1);
                        }
                    }
                }
            }
        }

      for(int i=0;i<n;i++){
          for(int j=0;j<m;j++){
			
              if(uf.isConnected(i*m+j,n*m)){
                  board[i][j]='O'; // set nodes in the same group with 'O' nodes on borders with 'O'
              }else{
                  board[i][j]='X'; // set nodes not in the same group with 'O' nodes on borders with 'X'
              }
          }
      }

    }
	
time complexity: O(nm*X),n=row counts,m=coloumn counts,X=average iterations in find method
space complexity: O(mn)
