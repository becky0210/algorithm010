============================================DFS
public int findCircleNum(int[][] M) {
        int m = M.length;
        int n=M[0].length;
        boolean[] vistited=new boolean[m];
        int res=0;
        for(int i=0;i<m;i++){
           
            if(!vistited[i]){
                dfs(M,i,n,vistited);
                res++;
            }
        }
        return res;
    }

    private void dfs(int[][] m, int i,int n,boolean[] visited) {
        for(int j=0;j<n;j++){
            if(m[i][j]==1 && !visited[j]) {
                visited[j] = true;
                dfs(m,j,n,visited);
            }
        }
    }
	
==============================================Union Find
public class UnionFind{
        int count;
        int[] parent;
        int[] size;
        public UnionFind(int n){
            count=n;
            parent=new int[n];
            size=new int[n];// record weight for each node
            for(int i=0;i<n;i++) {
                parent[i] = i;
                size[i]=i;
            }
        }
        public int find(int p){
            if(p!=parent[p]){
                parent[p]=parent[parent[p]];
                p=parent[p];
            }
            return p;
        }
        public void union(int p,int n){

            int i1 = find(p);
            int i2 = find(n);
            if(i1==i2) return;
            // define a rule to union,result could be wrong in some cases without this.
            if(size[i1]>size[i2]) {

                parent[i2] = i1;
                size[i1]+=size[i2];
            }else{
                parent[i1] = i2;
                size[i2]+=size[i1];
            }
            count--;

        }
        public int count(){
            return count;
        }

    }

    public int findCircleNum(int[][] M) {
        int n = M.length;
        UnionFind uf=new UnionFind(n);

        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(M[i][j]==1)
                    uf.union(i,j);
            }
        }
		// compared with using attribute count in uf,calling count method is faster
        return uf.count()>0?uf.count():1;
    }
	
worst complexity: O(n^3)
space complexity: O(n)