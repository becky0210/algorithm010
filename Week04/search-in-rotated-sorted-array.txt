//如果mid对应值=目标值，返回mid
//如果left位置上的值<=mid位置上的值+目标值的大小在left对应值和mid对应值之间，在左半边找
//如果left位置上的值<=mid位置上的值+目标值的大小不在在left对应值和mid对应值之间，在右半边找
//如果left位置上的值>mid位置上的值 + mid位置的值<right位置的值 + 目标值的大小在mid对应值和right对应值之间，在右半边找
//如果left位置上的值>mid位置上的值 + mid位置的值<right位置的值 + 目标值的大小不在mid对应值和right对应值之间，在左半边找
//经过以上过程没有找到目标值返回-1
public int search(int[] nums, int target) {
        int left=0,right=nums.length-1,mid=0;
        while(left<=right){
            mid=(left+right)/2;
            if(nums[mid]==target) return mid;
            if(nums[left]<=nums[mid]){
                if(nums[left]<=target && target<=nums[mid])
                    right=mid-1;
                else
                    left=mid+1;
            }else{
                if(nums[mid]<nums[right]){
                    if(nums[mid]<=target && target<=nums[right])
                        left=mid+1;
                    else
                        right=mid-1;
                }
            }

        }
        return -1;

    }